//================================================================================================================================================================
//
//3D弾処理[bullet3D.cpp]
//Author : Yuudai Takaya
//
//================================================================================================================================================================

//================================================================================================================================================================
//ライブラリリンク
//================================================================================================================================================================
#include "effect_backpack.h"
#include "billboard.h"
#include "manager.h"

//================================================================================================================================================================
//マクロ定義
//================================================================================================================================================================
#define	BLOCK_WIDE   (8.0f) //3D弾の横半径
#define	BLOCK_HEIGHT (8.0f) //3D弾の縦半径

//================================================================================================================================================================
//グローバル変数
//================================================================================================================================================================

//================================================================================================================================================================
//コンストラクタ
//================================================================================================================================================================
CBack_Effect::CBack_Effect():CBillboard(0)
{

}

//================================================================================================================================================================
//デストラクタ
//================================================================================================================================================================
CBack_Effect::~CBack_Effect()
{

}

//================================================================================================================================================================
//初期設定
//================================================================================================================================================================
HRESULT CBack_Effect::Init()
{
    CBillboard::Init();

    SetSize(BLOCK_WIDE, BLOCK_WIDE);

    SetCollar(255,0, 0, 255);

    m_nLife = 255;

    SetTexture("data\\TEXTURE\\effect000.jpg");
   
    return S_OK;
}

//================================================================================================================================================================
//終了処理
//================================================================================================================================================================
void CBack_Effect::Uninit()
{
    CBillboard::Uninit();
}

//================================================================================================================================================================
//更新処理（全オブジェクト）
//================================================================================================================================================================
void CBack_Effect::Update()
{
    D3DXVECTOR3* pPos = CBillboard::GetPos();
    D3DXVECTOR3* pSize = CBillboard::GetSize();

     m_nLife-=5;

     if (m_nLife < 0){
         Uninit();
     }
     
     SetCollar(255,0,0,m_nLife);

    pPos->x += m_move.x;
    pPos->y += m_move.y;
    pPos->z += m_move.z;

    CBillboard::Update();
}

//================================================================================================================================================================
//描画処理（全オブジェクト）
//================================================================================================================================================================
void CBack_Effect::Draw()
{
    CRenderer* pRenderer = nullptr;

    pRenderer = CManager::GetInstance()->GetRenderer();

    LPDIRECT3DDEVICE9 RendererDivice = pRenderer->GetDevice();

    //αブレンディングを加算合成に設定
    RendererDivice->SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD);
    RendererDivice->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);
    RendererDivice->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_ONE);

    CBillboard::Draw();

    //αブレンディンを元に戻そう
   RendererDivice->SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD);
   RendererDivice->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);
   RendererDivice->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);
}

//================================================================================================================================================================
// 3D弾生成
//================================================================================================================================================================
CBack_Effect* CBack_Effect::Create(D3DXVECTOR3 pos, D3DXVECTOR3 rot)
{
    // エフェクトの新規生成
    CBack_Effect* pCBack_Effect = new CBack_Effect();

    // 初期化
    pCBack_Effect->Init();

    // エフェクトの基準位置を設定（プレイヤーの位置を基準）
    pCBack_Effect->SetPos(pos.x, pos.y + 50.f, pos.z);

    // プレイヤーの進行方向を元に、エフェクトが放出される向き（ランダムに散らばる）
    D3DXVECTOR3 randomDirection = rot;

    // ランダムに少しエフェクトを散らすためのランダム値を加える
    float spreadFactor = 0.5f;  // 散らばり具合を調整する係数（大きいほど広がる）

    // X方向とZ方向にのみランダム変化を加える（Y軸はほとんど変化しないようにする）
    randomDirection.x += (rand() % 200 - 100) / 100.0f * spreadFactor;  // X方向のランダム変化
    randomDirection.y += (rand() % 20 - 10) / 100.0f * spreadFactor;  // Y方向のランダム変化（制限をかける）
    randomDirection.z += (rand() % 200 - 100) / 100.0f * spreadFactor;  // Z方向のランダム変化

    // ランダム化した方向ベクトルを使用して、エフェクトの移動方向を設定
    pCBack_Effect->m_move = randomDirection;

    return pCBack_Effect;
}