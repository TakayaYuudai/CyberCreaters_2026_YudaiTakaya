//================================================================================================================================================================
//
//オブジェクト3D処理[object3D.cpp]
//Author : Yuudai Takaya
//
//================================================================================================================================================================

//================================================================================================================================================================
//ライブラリリンク
//================================================================================================================================================================
#include "billboard.h"
#include "manager.h"

//================================================================================================================================================================
//コンストラクタ（自分自身の登録）
//================================================================================================================================================================
CBillboard::CBillboard(int nPriority): CObject(nPriority)
{


}

//================================================================================================================================================================
//デストラクタ
//================================================================================================================================================================
CBillboard::~CBillboard()
{

}

//================================================================================================================================================================
//初期設定
//================================================================================================================================================================
HRESULT CBillboard::Init()
{

	m_pVtxBuff = nullptr;
	m_pTexture = nullptr;
	m_fWidth = 0.0f;
	m_fHeight = 0.0f;
	m_nTime = 0;
	m_nAnimationId = 0;
	m_fSplit = 1.0f;
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_size = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_bDraw = true;

	LPDIRECT3DDEVICE9 pDevice;

	pDevice = CManager::GetInstance()->GetRenderer()->GetDevice();

	//頂点バッファの生成
	pDevice->CreateVertexBuffer(sizeof(VERTEX_3D) * 4,
		D3DUSAGE_WRITEONLY,
		FVF_VERTEX_3D,
		D3DPOOL_MANAGED,
		&m_pVtxBuff,
		NULL);

	//頂点情報へのポインタ
	VERTEX_3D* pVtx;

	//頂点バッファをロックし、頂点情報へのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	//頂点座標の設定
	pVtx[0].pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

	//法線ベクトルの設定
	pVtx[0].nor = D3DXVECTOR3(0.0f, 1.0f, 0.0f);
	pVtx[1].nor = D3DXVECTOR3(0.0f, 1.0f, 0.0f);
	pVtx[2].nor = D3DXVECTOR3(0.0f, 1.0f, 0.0f);
	pVtx[3].nor = D3DXVECTOR3(0.0f, 1.0f, 0.0f);

	//頂点カラーの設定
	pVtx[0].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
	pVtx[1].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
	pVtx[2].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
	pVtx[3].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);

	//テクスチャ座標の設定
	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f);

	//頂点バッファをアンロックする
	m_pVtxBuff->Unlock();

	return S_OK;
}

//================================================================================================================================================================
// 終了処理
//================================================================================================================================================================
void CBillboard::Uninit()
{
	// テクスチャの破棄
	if (m_pTexture != nullptr)
	{
		m_pTexture->Release();
		m_pTexture = nullptr;
	}

	// 頂点バッファの破棄
	if (m_pVtxBuff != nullptr)
	{
		m_pVtxBuff->Release();
		m_pVtxBuff = nullptr;
	}

	Deathflag();
}

//================================================================================================================================================================
//更新処理
//================================================================================================================================================================
void CBillboard::Update()
{
	if (m_pVtxBuff != nullptr)
	{
		UpdatepVtx();

		UpdateAnim();

		UpdateCollar();
	}
}

//================================================================================================================================================================
//テクスチャの設定
//================================================================================================================================================================
void CBillboard::SetTexture(std::string sPath)
{
	LPDIRECT3DDEVICE9 pDevice = CManager::GetInstance()->GetRenderer()->GetDevice();

	//引数のファイルパスを参照してテクスチャ読み込み

	//c_str関数の補足➡NULLで終わる文字配列へのポインタを返す(割と便利ですげぇ)

	D3DXCreateTextureFromFile(pDevice, sPath.c_str(), &m_pTexture);
}

//================================================================================================================================================================
//頂点座標更新処理
//================================================================================================================================================================
void CBillboard::UpdatepVtx()
{
	VERTEX_3D* pVtx;

	// 頂点バッファをロック
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	//頂点座標の指定
	pVtx[0].pos = D3DXVECTOR3(-m_fWidth, m_fHeight, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(m_fWidth, m_fHeight, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(-m_fWidth, -m_fHeight, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(m_fWidth, -m_fHeight, 0.0f);

	//頂点バッファをアンロックする
	m_pVtxBuff->Unlock();
}

//================================================================================================================================================================
//サイズ設定
//================================================================================================================================================================
void CBillboard::SetSize(float fWidth, float fHeight)
{
	m_fHeight = fHeight;
	m_fWidth = fWidth;
}

//================================================================================================================================================================
//Object3D座標設定
//================================================================================================================================================================
void CBillboard::SetPos(float x, float y, float z)
{
	m_pos = D3DXVECTOR3(x, y, z);
}

//================================================================================================================================================================
//位置を返す
//================================================================================================================================================================
D3DXVECTOR3* CBillboard::GetPos()
{
	return &m_pos;
}

//================================================================================================================================================================
//サイズを返す
//================================================================================================================================================================
D3DXVECTOR3* CBillboard::GetSize()
{
	m_size = D3DXVECTOR3(m_fWidth, m_fHeight, 0.0f);

	return &m_size;
}

//================================================================================================================================================================
//アニメーションの更新
//================================================================================================================================================================
void CBillboard::UpdateAnim()
{
	VERTEX_3D* pVtx; //頂点情報へのポインタ

	float fSplitSize = 1.0f / m_fSplit;

	// 頂点バッファをロック
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	//テクスチャ座標の設定
	if (m_bRev == true)
	{
		pVtx[0].tex = D3DXVECTOR2(fSplitSize * (float)m_nAnimationId, 0.0f);
		pVtx[1].tex = D3DXVECTOR2(fSplitSize * (float)(m_nAnimationId + 1.0f), 0.0f);
		pVtx[2].tex = D3DXVECTOR2(fSplitSize * (float)m_nAnimationId, 1.0f);
		pVtx[3].tex = D3DXVECTOR2(fSplitSize * (float)(m_nAnimationId + 1.0f), 1.0f);
	}

	else
	{
		m_nextTime++;

		pVtx[0].tex = D3DXVECTOR2(fSplitSize * (float)(m_nAnimationId + 1.0f), 0.0f);
		pVtx[1].tex = D3DXVECTOR2(fSplitSize * (float)m_nAnimationId, 0.0f);
		pVtx[2].tex = D3DXVECTOR2(fSplitSize * (float)(m_nAnimationId + 1.0f), 1.0f);
		pVtx[3].tex = D3DXVECTOR2(fSplitSize * (float)m_nAnimationId, 1.0f);
	}

	//頂点バッファをアンロックする
	m_pVtxBuff->Unlock();

	// アニメーション進行処理
	{
		if (m_nextTime >= m_nTime)
		{
			m_nAnimationId++;

			m_nextTime = 0;

			if (m_nAnimationId >= m_fSplit)
			{
				m_nAnimationId = 0;
			}
		}
	}
}

//================================================================================================================================================================
//現在のポストアニメーション
//================================================================================================================================================================
void CBillboard::GageAnim(static float fGageStatus)
{
	VERTEX_3D* pVtx;

	// 頂点バッファをロック
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	//座標位置割合
	float fWidth = m_fWidth * 2.f * 0.1f * fGageStatus;

	////頂点座標の指定
	pVtx[0].pos = D3DXVECTOR3(-fWidth, m_fHeight, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(+fWidth, m_fHeight, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(-fWidth, -m_fHeight, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(+fWidth, -m_fHeight, 0.0f);

	//現在のtex座標位置割合
	float TexWidth = 1.0 * 0.01 * fGageStatus;

	//テクスチャ座標の設定
	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f);

	//頂点バッファをアンロックする
	m_pVtxBuff->Unlock();
}

//================================================================================================================================================================
//更新処理
//================================================================================================================================================================
void CBillboard::UpdateCollar()
{
	//頂点情報へのポインタ
	VERTEX_3D* pVtx;

	//頂点バッファをロック
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	//頂点カラー
	pVtx[0].col = D3DCOLOR_RGBA(m_nRed, m_nGreen, m_nBlue, m_nAlpha);
	pVtx[1].col = D3DCOLOR_RGBA(m_nRed, m_nGreen, m_nBlue, m_nAlpha);
	pVtx[2].col = D3DCOLOR_RGBA(m_nRed, m_nGreen, m_nBlue, m_nAlpha);
	pVtx[3].col = D3DCOLOR_RGBA(m_nRed, m_nGreen, m_nBlue, m_nAlpha);

	//頂点バッファをアンロックする
	m_pVtxBuff->Unlock();
}

//================================================================================================================================================================
//アニメーション設定
//================================================================================================================================================================
void CBillboard::SetAnimation(float fSplit, int nTime)
{
	if (fSplit > 0)
	{
		m_fSplit = fSplit;
		m_nTime = nTime;
	}
}

//================================================================================================================================================================
//描画処理
//================================================================================================================================================================
void CBillboard::Draw()
{
	if (m_bDraw){

		//計算用マトリックス
		D3DXMATRIX mtxRot, mtxTrans;
		//ビューマトリックス取得用
		D3DXMATRIX mtxView;

		CRenderer* pRenderer = nullptr;

		pRenderer = CManager::GetInstance()->GetRenderer();

		LPDIRECT3DDEVICE9 RendererDivice = pRenderer->GetDevice();

		//ワールドマトリックスの初期化
		D3DXMatrixIdentity(&m_mtxWorld);

		//ビューマトリックスを取得
		RendererDivice->GetTransform(D3DTS_VIEW, &mtxView);

		//ポリゴンをカメラに対して正面に向けましょう
		D3DXMatrixInverse(&m_mtxWorld, NULL, &mtxView); //逆行列を求める
		m_mtxWorld._41 = 0.0f;
		m_mtxWorld._42 = 0.0f;
		m_mtxWorld._43 = 0.0f;

		//位置を反映
		D3DXMatrixTranslation(&mtxTrans, m_pos.x, m_pos.y, m_pos.z);

		D3DXMatrixMultiply(&m_mtxWorld, &m_mtxWorld, &mtxTrans);

		//ワールドマトリックスの設定
		RendererDivice->SetTransform(D3DTS_WORLD, &m_mtxWorld);

		//頂点バッファをデータストリームに設定
		RendererDivice->SetStreamSource(0, m_pVtxBuff, 0, sizeof(VERTEX_3D));

		//頂点フォーマットの設定
		RendererDivice->SetFVF(FVF_VERTEX_3D);

		//テクスチャの設定
		RendererDivice->SetTexture(0, m_pTexture);

		//ポリゴン描画
		RendererDivice->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);//プリミティブの種類
	}
}

//================================================================================================================================================================
//Object3D生成
//================================================================================================================================================================
CBillboard* CBillboard::Create(int nPriority)
{
	CBillboard* pCBillboard = new CBillboard(nPriority);

	pCBillboard->Init();

	return pCBillboard;
}