//================================================================================================================================================================
//
//プレイヤーHPゲージ処理[player_hp_gage.cpp]
//Author : Yuudai Takaya
//
//================================================================================================================================================================

//================================================================================================================================================================
//ライブラリリンク
//================================================================================================================================================================
#include "character.h"
#include "field.h"
#include "manager.h"

//================================================================================================================================================================
//マクロ定義
//================================================================================================================================================================
#define	BLOCK_WIDE   (300.f) //ブロックの横半径
#define	BLOCK_HEIGHT (25.f) //ブロックの縦半径

//================================================================================================================================================================
//グローバル変数
//================================================================================================================================================================

//------------------------------------------------------------Titleバック-----------------------------------------------------------

//================================================================================================================================================================
//コンストラクタ
//================================================================================================================================================================
C2dcharacter::C2dcharacter(int nP) :CObject2D(nP)
{
}

//================================================================================================================================================================
//デストラクタ
//================================================================================================================================================================
C2dcharacter::~C2dcharacter()
{

}

//================================================================================================================================================================
//初期設定
//================================================================================================================================================================
HRESULT C2dcharacter::Init()
{
	CObject2D::Init();

	m_move = D3DXVECTOR2((float)NULL, (float)NULL);
	m_rot = D3DXVECTOR3((float)NULL, (float)NULL, (float)NULL);
	return S_OK;
}

//================================================================================================================================================================
//終了処理
//================================================================================================================================================================
void C2dcharacter::Uninit()
{
	CObject2D::Uninit();
}

//================================================================================================================================================================
//更新処理（全オブジェクト）
//================================================================================================================================================================
void C2dcharacter::Update(){

	D3DXVECTOR2* pPos = GetPos();

	m_move.x += pPos->x;
	m_move.y += pPos->y;

	CObject2D::Update();
}

//================================================================================================================================================================
//描画処理（全オブジェクト）
//================================================================================================================================================================
void C2dcharacter::Draw(){
	CObject2D::Draw();
}

//-------------------------------------------------------------------------------------------------------------------------------------

//================================================================================================================================================================
//コンストラクタ
//================================================================================================================================================================
CXcharacter::CXcharacter(int nP) :CObjectX(nP){

}

//================================================================================================================================================================
//デストラクタ
//================================================================================================================================================================
CXcharacter::~CXcharacter(){

}

//================================================================================================================================================================
//初期設定
//================================================================================================================================================================
HRESULT CXcharacter::Init(){

	CObjectX::Init();
	m_move = D3DXVECTOR3((float)NULL,(float)NULL,(float)NULL);
	m_rot = D3DXVECTOR3((float)NULL,(float)NULL,(float)NULL);
	m_nLife = NULL;
	m_nInterval = NULL;
	m_StateMode = NONE;

	return S_OK;
}

//================================================================================================================================================================
//終了処理
//================================================================================================================================================================
void CXcharacter::Uninit(){
	CObjectX::Uninit();
}

//================================================================================================================================================================
//更新処理（全オブジェクト）
//================================================================================================================================================================
void CXcharacter::Update(){

	D3DXVECTOR3* pPos = GetPos();
	D3DXVECTOR3* pRot = GetRot();

	if (m_StateMode == STATEMODE::DAMAGE)
	{
		++m_nInterval;

		if (m_nInterval > 60)
		{
			m_StateMode = NONE;
			m_nInterval = NULL;
		}
	}

	//移動値の処理
	pPos->x += m_move.x;
	pPos->y += m_move.y;
	pPos->z += m_move.z;

	//回転値の処理
	pRot->y += m_rot.y;
	pRot->x += m_rot.x;
	pRot->z += m_rot.z;

	LimitStage(*pPos);

	CObjectX::Update();
}

//================================================================================================================================================================
//ステージ外出さない処理
//================================================================================================================================================================
void CXcharacter::LimitStage(D3DXVECTOR3& pos) {

	CObject* pObject = CObject::GetTop(); // リストの先頭オブジェクトから開始

	while (pObject != nullptr)
	{
		// nullptrチェックは不要。whileループで pObject != nullptr が保証される

		// オブジェクトの種類取得
		CObject::TYPE type = pObject->GetType();

		// ボスタイプのチェック
		if (type == CObject::TYPE::FLOOR)
		{
			// 安全にダウンキャスト
			CField* floor = dynamic_cast<CField*>(pObject);

			// ダウンキャストに成功した場合
			if (floor) {

				D3DXVECTOR3* FloPos = floor->GetPos();					      //床の位置取得
				D3DXVECTOR3* FloSize = floor->GetSize();				      //床のそれぞれのサイズ取得
				float fRangeSplit = 0.85f;                                    //行動範囲制限割合
				D3DXVECTOR3 fLimitRange = *FloPos + (*FloSize * fRangeSplit); //行動可能範囲を算出

				if (pos.x <= -fLimitRange.x) {
					//左
					pos.x = -fLimitRange.x;
				}
				if (pos.x >= fLimitRange.x) {
					//右
					pos.x = fLimitRange.x;
				}
				if (pos.z <= -fLimitRange.z) {
					//手前
					pos.z = -fLimitRange.z;
				}
				if (pos.z >= fLimitRange.z) {
					//奥
					pos.z = fLimitRange.z;
				}
				if (pos.y <= floor->GetPos()->y) {
					//床
					pos.y = floor->GetPos()->y;
				}
			}
		}
		// 次のオブジェクトに移動
		pObject = pObject->GetNext();
	}
}

//================================================================================================================================================================
//描画処理（全オブジェクト）
//================================================================================================================================================================
void CXcharacter::Draw()
{
	CObjectX::Draw();
}