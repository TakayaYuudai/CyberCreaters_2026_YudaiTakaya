#include "object.h"

// 静的メンバ変数の初期化
int CObject::m_nNumAll = 0; // 全オブジェクト数
CObject* CObject::m_pTop = nullptr; // リストの先頭
CObject* CObject::m_pCur = nullptr; // 現在のオブジェクト（最後に追加されたオブジェクト）

//====================================================================================================
// コンストラクタ
//====================================================================================================
CObject::CObject(int nPriority) : m_nPriority(nPriority) {

    // 初回オブジェクトの場合
    if (m_pTop == nullptr) {
        // オブジェクトがリストに一つもない場合

        m_pTop = this;     // このオブジェクトが先頭
        m_pCur = this;     // 現在のオブジェクトもこのオブジェクト
        m_pPrev = nullptr; // 前のオブジェクトはなし
        m_pNext = nullptr; // 次のオブジェクトもなし
    }

    else{
        CObject* pInsertPos = m_pTop; // 挿入位置を探す
        CObject* pPrev = nullptr; // 挿入位置の前のオブジェクト

        // 優先度に基づいて挿入位置を探索
        while (pInsertPos != nullptr && pInsertPos->m_nPriority >= nPriority) {
            pPrev = pInsertPos;  // 現在のオブジェクトを前のオブジェクトとして保存
            pInsertPos = pInsertPos->m_pNext; // 次のオブジェクトへ進む
        }

        // 挿入位置でポインタの設定
        m_pPrev = pPrev;   // 前のオブジェクト
        m_pNext = pInsertPos; // 次のオブジェクト

        if (pPrev == nullptr){  // 先頭に挿入する場合
            m_pTop = this; // このオブジェクトを先頭に設定
        }
        else{
            pPrev->m_pNext = this; // 前のオブジェクトの次にこのオブジェクトを設定
        }
        if (pInsertPos != nullptr) {
            pInsertPos->m_pPrev = this; // 次のオブジェクトがあれば、前にこのオブジェクトを設定
        }
    }

    m_bDeath = false;  // 死亡フラグを初期化
    m_nNumAll++;       // 全オブジェクト数をインクリメント
}

//====================================================================================================
// デストラクタ
//====================================================================================================
CObject::~CObject() {
    Release(); // オブジェクトの解放処理
}

//====================================================================================================
// すべてのオブジェクトの解放
//====================================================================================================
void CObject::ReleaseAll() {
    CObject* pObj = m_pTop;  // 先頭オブジェクトから順番に解放

    while (pObj != nullptr)
    {
        CObject* pNext = pObj->m_pNext; // 次のオブジェクトを保存
        pObj->Release(); // 解放処理
        pObj = pNext; // 次のオブジェクトに進む
    }

    m_pTop = nullptr; // 先頭ポインタをnullptrにリセット
    m_pCur = nullptr; // 現在のポインタをnullptrにリセット
}

//====================================================================================================
// すべてのオブジェクトの更新
//====================================================================================================
void CObject::UpdateAll() {
    CObject* pObj = m_pTop;  // 先頭オブジェクトから順番に更新

    while (pObj != nullptr)
    {
        CObject* pNext = pObj->m_pNext; // 次のオブジェクトを保存
        pObj->Update(); // オブジェクトの更新
        if (pObj->m_bDeath)  // 死亡フラグを確認
        {
            delete pObj; // 死亡していたらオブジェクトを削除
        }
        pObj = pNext; // 次のオブジェクトに進む
    }
    int n = 0;
}

//====================================================================================================
// すべてのオブジェクトの描画
//====================================================================================================
void CObject::DrawAll() {
    CObject* pObj = m_pTop;  // 先頭オブジェクトから順番に描画

    while (pObj != nullptr)
    {
        pObj->Draw(); // オブジェクトの描画
        pObj = pObj->m_pNext; // 次のオブジェクトに進む
    }
}

//====================================================================================================
// 自身の解放
//====================================================================================================
void CObject::Release() {
    CObject* pPrev = m_pPrev; // 前のオブジェクト
    CObject* pNext = m_pNext; // 次のオブジェクト

    if (pPrev == nullptr)  // 先頭のオブジェクトの場合
    {
        m_pTop = pNext; // 先頭ポインタを次のオブジェクトに設定
        if (pNext != nullptr) {
            pNext->m_pPrev = nullptr; // 次のオブジェクトの前をnullptrに設定
        }
    }
    else if (pNext == nullptr)  // 最後のオブジェクトの場合
    {
        m_pCur = pPrev; // 現在のオブジェクトポインタを前のオブジェクトに設定
        pPrev->m_pNext = nullptr; // 前のオブジェクトの次をnullptrに設定
    }
    else  // 中間のオブジェクトの場合
    {
        pPrev->m_pNext = pNext; // 前のオブジェクトの次を次のオブジェクトに設定
        pNext->m_pPrev = pPrev; // 次のオブジェクトの前を前のオブジェクトに設定
    }

    m_pNext = nullptr; // 次のオブジェクトポインタをnullptrに設定
    m_pPrev = nullptr; // 前のオブジェクトポインタをnullptrに設定
    m_bDeath = false;  // 死亡フラグをリセット
    m_nNumAll--;       // 全オブジェクト数をデクリメント
}

//====================================================================================================
// タイプ取得
//====================================================================================================
CObject::TYPE CObject::GetType() {
    return m_type; // オブジェクトのタイプを返す
}

//====================================================================================================
// タイプ設定
//====================================================================================================
void CObject::SetType(TYPE ntype) {
    m_type = ntype; // オブジェクトのタイプを設定
}
