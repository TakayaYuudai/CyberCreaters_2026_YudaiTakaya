//================================================================================================================================================================
//
//3D弾処理[bullet3D.cpp]
//Author : Yuudai Takaya
//
//================================================================================================================================================================

//================================================================================================================================================================
//ライブラリリンク
//================================================================================================================================================================
#include "effect_cool.h"
#include "billboard.h"
#include "manager.h""

//================================================================================================================================================================
//マクロ定義
//================================================================================================================================================================
#define	BLOCK_WIDE   (5.0f) //3D弾の横半径
#define	BLOCK_HEIGHT (5.0f) //3D弾の縦半径

//================================================================================================================================================================
//グローバル変数
//================================================================================================================================================================

//================================================================================================================================================================
//コンストラクタ
//================================================================================================================================================================
CCool_Effect::CCool_Effect() :CBillboard(0)
{

}

//================================================================================================================================================================
//デストラクタ
//================================================================================================================================================================
CCool_Effect::~CCool_Effect()
{

}

//================================================================================================================================================================
//初期設定
//================================================================================================================================================================
HRESULT CCool_Effect::Init()
{
    CBillboard::Init();

    SetSize(BLOCK_WIDE, BLOCK_WIDE);

    m_nLife = 60;

    SetCollar(0, 155, 255, 255);

    SetTexture("data\\TEXTURE\\effect000.jpg");

    return S_OK;
}

//================================================================================================================================================================
//終了処理
//================================================================================================================================================================
void CCool_Effect::Uninit()
{
    CBillboard::Uninit();
}

//================================================================================================================================================================
//更新処理（全オブジェクト）
//================================================================================================================================================================
void CCool_Effect::Update()
{
    D3DXVECTOR3* pPos = CBillboard::GetPos();
    D3DXVECTOR3* pSize = CBillboard::GetSize();

    m_nLife--;

    if (m_nLife < 0) {
        Uninit();
    }

    pPos->x += m_move.x;
    pPos->y += m_move.y;
    pPos->z += m_move.z;

    CBillboard::Update();
}

//================================================================================================================================================================
//描画処理（全オブジェクト）
//================================================================================================================================================================
void CCool_Effect::Draw()
{
    CRenderer* pRenderer = nullptr;

    pRenderer = CManager::GetInstance()->GetRenderer();

    LPDIRECT3DDEVICE9 RendererDivice = pRenderer->GetDevice();

    //αブレンディングを加算合成に設定
    RendererDivice->SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD);
    RendererDivice->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);
    RendererDivice->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_ONE);

    CBillboard::Draw();

    //αブレンディンを元に戻そう
    RendererDivice->SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD);
    RendererDivice->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);
    RendererDivice->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);
}

//================================================================================================================================================================
// 3D弾生成
//================================================================================================================================================================
CCool_Effect* CCool_Effect::Create(D3DXVECTOR3 pos)
{
    // エフェクトの新規生成
    CCool_Effect* pCCool_Effect = new CCool_Effect();

    // 初期化
    pCCool_Effect->Init();

    // 生成位置を設定
    pCCool_Effect->SetPos(pos.x, pos.y, pos.z);

    // ランダムな移動方向を生成（-1.0〜1.0 の範囲でランダム）
    D3DXVECTOR3 randomDirection;
    randomDirection.x = ((rand() % 200) - 100) / 100.0f;
    randomDirection.y = ((rand() % 200) - 100) / 100.0f;
    randomDirection.z = ((rand() % 200) - 100) / 100.0f;

    // 正規化して単位ベクトル化（移動方向ベクトルの大きさを1にする）
    D3DXVec3Normalize(&randomDirection, &randomDirection);

    // スピードをランダムに設定
    float minSpeed = 1.0f;  // 最小スピード
    float maxSpeed = 5.0f;  // 最大スピード
    float speed = minSpeed + static_cast<float>(rand()) / RAND_MAX * (maxSpeed - minSpeed);

    // 移動方向とスピードを掛けて設定
    pCCool_Effect->m_move = randomDirection * speed;

    return pCCool_Effect;
}