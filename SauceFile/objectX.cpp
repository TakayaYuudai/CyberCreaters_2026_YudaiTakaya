//================================================================================================================================================================
// モデル処理[objectX.cpp]
// Author : Yuudai Takaya
//================================================================================================================================================================

//================================================================================================================================================================
// ライブラリリンク
//================================================================================================================================================================
#include "objectX.h"
#include "manager.h"

//================================================================================================================================================================
// コンストラクタ（自分自身の登録）
//================================================================================================================================================================
CObjectX::CObjectX(int nPriority) : CObject(nPriority)
{
  
}

//================================================================================================================================================================
// デストラクタ
//================================================================================================================================================================
CObjectX::~CObjectX()
{
}

//================================================================================================================================================================
// 初期設定
//================================================================================================================================================================
HRESULT CObjectX::Init()
{
    m_pMesh = nullptr;
    m_pBuffMat = nullptr;
    m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    m_rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    m_Scale = D3DXVECTOR3(1.f, 1.f, 1.f); // 初期スケール
    m_vtxMaxObject = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    m_vtxMinObject = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    m_Modelsize = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    m_Scale = D3DXVECTOR3(100.f, 100.f, 100.f); // 初期スケールを1に設定

    return S_OK;
}

//================================================================================================================================================================
// 位置を返す
//================================================================================================================================================================
D3DXVECTOR3* CObjectX::GetPos()
{
    return &m_pos;
}

//================================================================================================================================================================
// 位置を返す
//================================================================================================================================================================
D3DXVECTOR3* CObjectX::GetRot()
{
    return &m_rot;
}

//================================================================================================================================================================
// 終了処理
//================================================================================================================================================================
void CObjectX::Uninit()
{
    // メッシュの破棄
    if (m_pMesh != NULL)
    {
        m_pMesh->Release();
        m_pMesh = NULL;
    }

    // マテリアルの破棄
    if (m_pBuffMat != NULL)
    {
        m_pBuffMat->Release();
        m_pBuffMat = NULL;
    }

    Deathflag();
}

//================================================================================================================================================================
// 更新処理
//================================================================================================================================================================
void CObjectX::Update()
{
}

//================================================================================================================================================================
// テクスチャの設定
//================================================================================================================================================================
void CObjectX::ModelFilePath(std::string sPath)
{
    LPDIRECT3DDEVICE9 pDevice = CManager::GetInstance()->GetRenderer()->GetDevice();

    // 引数のファイルパスを参照してモデル読み込み
    D3DXLoadMeshFromX(sPath.c_str(), D3DXMESH_SYSTEMMEM, pDevice, NULL, &m_pBuffMat, NULL, &m_dwNumMat, &m_pMesh);

    ModelSizeSum();
}

//================================================================================================================================================================
// Object3D座標設定
//================================================================================================================================================================
void CObjectX::SetPos(float x, float y, float z)
{
    m_pos = D3DXVECTOR3(x, y, z);
}

//================================================================================================================================================================
// サイズを返す
//================================================================================================================================================================
D3DXVECTOR3* CObjectX::GetSize()
{
    return &m_Modelsize;
}

//================================================================================================================================================================
// モデルの最大値と最小を求める
//================================================================================================================================================================
void CObjectX::ModelSizeSum()
{
    int nNumVtx;    // 頂点数
    DWORD sizeFVF;  // 頂点フォーマットのサイズ
    BYTE* pVtxBuff; // 頂点バッファへのポインタ

    // 頂点数を取得
    nNumVtx = m_pMesh->GetNumVertices();

    // 頂点フォーマットのサイズを取得
    sizeFVF = D3DXGetFVFVertexSize(m_pMesh->GetFVF());

    // 頂点バッファのロック
    m_pMesh->LockVertexBuffer(D3DLOCK_READONLY, (void**)&pVtxBuff);

    for (int i = 0; i < nNumVtx; i++)
    {
        // 最大値を求めるための変数
        D3DXVECTOR3 vtx;

        vtx = *(D3DXVECTOR3*)pVtxBuff;

        // X, Y, Z座標にスケーリングを適用
        vtx.x *= m_Scale.x;
        vtx.y *= m_Scale.y;
        vtx.z *= m_Scale.z;

        // X最大頂点座標の比較
        if (vtx.x > m_vtxMaxObject.x)
        {
            m_vtxMaxObject.x = vtx.x;
        }
        else if (vtx.x < m_vtxMinObject.x)
        {
            m_vtxMinObject.x = vtx.x;
        }

        // Y最大頂点座標の比較
        if (vtx.y > m_vtxMaxObject.y)
        {
            m_vtxMaxObject.y = vtx.y;
        }
        else if (vtx.y < m_vtxMinObject.y)
        {
            m_vtxMinObject.y = vtx.y;
        }

        // Z最大頂点座標の比較
        if (vtx.z > m_vtxMaxObject.z)
        {
            m_vtxMaxObject.z = vtx.z;
        }
        else if (vtx.z < m_vtxMinObject.z)
        {
            m_vtxMinObject.z = vtx.z;
        }

        // 頂点フォーマットのサイズ分ポインタを進める
        pVtxBuff += sizeFVF;
    }

    // オブジェクトのサイズの計算をします
    m_Modelsize = m_vtxMaxObject - m_vtxMinObject;

    // 頂点バッファのアンロック
    m_pMesh->UnlockVertexBuffer();
}

//================================================================================================================================================================
// 描画処理
//================================================================================================================================================================
void CObjectX::Draw()
{
    // 計算用マトリックス
    D3DXMATRIX mtxRot, mtxTrans, mtxScale;

    // 現在のマテリアル保存用
    D3DMATERIAL9 matDef;

    // マテリアルデータへのポインタ
    D3DXMATERIAL* pMat;

    // Rendererの取得
    CRenderer* pRenderer = nullptr;
    pRenderer = CManager::GetInstance()->GetRenderer();
    LPDIRECT3DDEVICE9 RendererDevice = pRenderer->GetDevice();

    // ワールドマトリックスの初期化
    D3DXMatrixIdentity(&m_mtxWorld);

    // 向きを反映（回転行列）
    D3DXMatrixRotationYawPitchRoll(&mtxRot, m_rot.y, m_rot.x, m_rot.z);
    D3DXMatrixMultiply(&m_mtxWorld, &m_mtxWorld, &mtxRot);

    // 位置を反映（移動行列）
    D3DXMatrixTranslation(&mtxTrans, m_pos.x, m_pos.y, m_pos.z);
    D3DXMatrixMultiply(&m_mtxWorld, &m_mtxWorld, &mtxTrans);

    // ワールドマトリックスの設定
    RendererDevice->SetTransform(D3DTS_WORLD, &m_mtxWorld);

    // 現在のマテリアルを取得
    RendererDevice->GetMaterial(&matDef);

    // マテリアルデータへのポインタを取得
    pMat = (D3DXMATERIAL*)m_pBuffMat->GetBufferPointer();

    // メッシュの描画
    for (int nCntMat = 0; nCntMat < (int)m_dwNumMat; nCntMat++)
    {
        // マテリアルの設定
        RendererDevice->SetMaterial(&pMat[nCntMat].MatD3D);

        // テクスチャの設定（今回はNULL）
        RendererDevice->SetTexture(0, NULL);

        // モデル（パーツ）の描画
        m_pMesh->DrawSubset(nCntMat);
    }

    // 保存していたマテリアルを戻す
    RendererDevice->SetMaterial(&matDef);
}

//================================================================================================================================================================
// Object3D生成
//================================================================================================================================================================
CObjectX* CObjectX::Create(int nPriority)
{
    CObjectX* pObj = new CObjectX(nPriority);
    return pObj;
}

//================================================================================================================================================================
// スケーリングの設定
//================================================================================================================================================================
void CObjectX::SetScale(float x, float y, float z)
{
    m_Scale = D3DXVECTOR3(x, y, z);
    ModelSizeSum();  // サイズ変更後に再計算
}
