//================================================================================================================================================================
//
//入力処理[input.cpp]
//Author : Yuudai Takaya
//
//================================================================================================================================================================
#include "input.h"

//静的メンバ初期化
LPDIRECTINPUT8 CInput::m_pInput = nullptr;

//================================================================================================================================================================
//コンストラクタ
//================================================================================================================================================================
CInput::CInput()
{
	m_pDevice = nullptr;
}

//================================================================================================================================================================
//デストラクタ
//================================================================================================================================================================
CInput::~CInput()
{
}

//================================================================================================================================================================
//初期化
//================================================================================================================================================================
HRESULT CInput::Init(HINSTANCE hInstance, HWND hWnd)
{
	if (m_pInput == nullptr)
	{
		if (FAILED(DirectInput8Create(hInstance, DIRECTINPUT_VERSION, IID_IDirectInput8, (void**)&m_pInput, NULL)))
		{
			return E_FAIL;
		}
	}
	return S_OK;
}

//================================================================================================================================================================
//終了
//================================================================================================================================================================
void CInput::Uninit()
{
	//入力デバイスの破棄
	if (m_pDevice != nullptr)
	{
		m_pDevice->Unacquire();
		m_pDevice = nullptr;
	}

	//DirectInputオブジェクトの破棄
	if (m_pInput != nullptr)
	{
		m_pInput->Release();
		m_pInput = nullptr;
	}
}

//================================================================================================================================================================
//コンストラクタ
//================================================================================================================================================================
CInputKeyboard::CInputKeyboard()
{
}

//================================================================================================================================================================
//デストラクタ
//================================================================================================================================================================
CInputKeyboard::~CInputKeyboard()
{
}


//================================================================================================================================================================
//初期化
//================================================================================================================================================================
HRESULT CInputKeyboard::Init(HINSTANCE hInstance, HWND hWnd)
{
	CInput::Init(hInstance, hWnd);
	//入力デバイスの生成
	if (FAILED(m_pInput->CreateDevice(GUID_SysKeyboard, &m_pDevice, NULL)))
	{
		return E_FAIL;
	}
	//データフォーマットを設定
	if (FAILED(m_pDevice->SetDataFormat(&c_dfDIKeyboard)))
	{
		return E_FAIL;
	}
	//協調モードを設定
	if (FAILED(m_pDevice->SetCooperativeLevel(hWnd, (DISCL_FOREGROUND | DISCL_NONEXCLUSIVE))))
	{
		return E_FAIL;
	}
	//キーボードのアクセス権を獲得
	m_pDevice->Acquire();
	return S_OK;
}

//================================================================================================================================================================
//終了
//================================================================================================================================================================
void CInputKeyboard::Uninit()
{
	CInput::Uninit();
}

//================================================================================================================================================================
//更新
//================================================================================================================================================================
void CInputKeyboard::Update()
{
	BYTE aKeyState[NUM_KEY_MAX]; //入力情報

	int nCntKey;

	//入力デバイスからデータを取得
	if (SUCCEEDED(m_pDevice->GetDeviceState(sizeof(aKeyState), &aKeyState[0])))
	{
		for (nCntKey = 0; nCntKey < NUM_KEY_MAX; nCntKey++)
		{
			m_aKeyStateTrigger[nCntKey] = (m_aKeyState[nCntKey] ^ aKeyState[nCntKey]) & aKeyState[nCntKey];
			m_aKeyState[nCntKey] = aKeyState[nCntKey]; //キーボードのプレス情報を保存
		}
	}
	else
	{
		m_pDevice->Acquire(); //キーボードのアクセス権を獲得
	}
}

//================================================================================================================================================================
//キーボードの情報を取得
//================================================================================================================================================================
bool CInputKeyboard::GetPress(int nKey)
{
	return(m_aKeyState[nKey] & 0x80) != 0;
}

bool CInputKeyboard::GetTrigger(int nKey)
{
	return(m_aKeyStateTrigger[nKey] & 0x80) != 0;
}


//===========================================================================================================================================================================================
//
// CInputJoypadクラスの処理
// 
//===========================================================================================================================================================================================


//===========================================================================================================================================================================================
//ジョイパッドのコンストラクタ
//===========================================================================================================================================================================================
CInputJoypad::CInputJoypad()
{

}

//===========================================================================================================================================================================================
//ジョイパッドのデストラクタ
//===========================================================================================================================================================================================
CInputJoypad::~CInputJoypad()
{

}

//===========================================================================================================================================================================================
//ジョイパッドのデストラクタ
//===========================================================================================================================================================================================
HRESULT CInputJoypad::Init()
{
	memset(&m_aKeyState, 0, sizeof(XINPUT_STATE));
	memset(&m_aKeyStateTrigger, 0, sizeof(XINPUT_STATE));

	XInputEnable(true);

	ZeroMemory(&m_joykeyMoter, sizeof(XINPUT_VIBRATION));

	m_Time = 0;
	m_Strength = 0;

	return S_OK;
}

//===========================================================================================================================================================================================
//ジョイパッドの終了処理
//===========================================================================================================================================================================================
void CInputJoypad::Uninit()
{
	//XInputのステートを設定
	XInputEnable(false);
}

//===========================================================================================================================================================================================
//ジョイパッドの更新処理
//===========================================================================================================================================================================================
void CInputJoypad::Update()
{
	XINPUT_STATE joykeystate; //ジョイパッドの入力情報

	//ジョイパッドの情報を取得
	if (XInputGetState(0, &joykeystate) == ERROR_SUCCESS)
	{
		UpdateStick(&joykeystate);

		joykeystate.Gamepad.wButtons |= GetJoypadStick(joykeystate.Gamepad.sThumbLX, joykeystate.Gamepad.sThumbLY, JOYPAD_DEADZONE);

		WORD Button = joykeystate.Gamepad.wButtons;
		WORD OldButton = m_joykeyState;

		m_joykeyStateTrigger = Button & ~OldButton;    // トリガー処理
		m_joykeyStateRelease = ~Button & OldButton;    // リリース処理

		// 現在の時間を取得する
		m_joykeyCurrentTime.Gamepad.wButtons = timeGetTime();

		if (joykeystate.Gamepad.wButtons && ((m_joykeyCurrentTime.Gamepad.wButtons - m_joykeyExecLastTime.Gamepad.wButtons) > SPEED_KEY))
		{
			// 最後に真を返した時間を保存
			m_joykeyExecLastTime.Gamepad.wButtons = m_joykeyCurrentTime.Gamepad.wButtons;

			// キーボードのリピート情報を保存
			m_joykeyStateRepeat = joykeystate.Gamepad.wButtons;
		}
		else
		{
			// キーボードのリピート情報を保存
			m_joykeyStateRepeat = 0;
		}

		m_joykeyState = joykeystate.Gamepad.wButtons;  // プレス処理
	}
}

//===========================================================================================================================================================================================
//ジョイパッドのプレス情報を取得
//===========================================================================================================================================================================================
bool CInputJoypad::GetPress(JOYKEY key)
{
	return m_joykeyState & (0x01 << key);
}

//===========================================================================================================================================================================================
//ジョイパッドのトリガー情報を取得
//===========================================================================================================================================================================================
bool CInputJoypad::GetTrigger(JOYKEY key)
{
	return m_joykeyStateTrigger & (0x01 << key);
}

//===========================================================================================================================================================================================
//スティックの更新処理
//===========================================================================================================================================================================================
void CInputJoypad::UpdateStick(XINPUT_STATE* xinput)
{
	for (int nCntStick = 0; nCntStick < STICKTYPE_MAX; nCntStick++)
	{
		float fX, fY; //スティックのX軸、Y軸

		switch (nCntStick)
		{
		case STICKTYPE_LEFT:
			fX = (xinput->Gamepad.sThumbLX);
			fY = (xinput->Gamepad.sThumbLY);
			m_LInput.x = fX;
			m_LInput.y = fY;

			// Lトリガーの正規化
			m_LTrigger.y = (xinput->Gamepad.bLeftTrigger / 255.f); // 0.0f から 1.0f へ正規化
			break;

		case STICKTYPE_RIGHT:
			fX = (xinput->Gamepad.sThumbRX);
			fY = (xinput->Gamepad.sThumbRY);
			m_RInput.x = fX;
			m_RInput.y = fY;

			// Rトリガーの正規化
			m_RTrigger.y = (xinput->Gamepad.bRightTrigger / 255.f); // 0.0f から 1.0f へ正規化
			break;
		}


		// 角度を取得
		m_stick.afAngle[nCntStick] = FindAngle(D3DXVECTOR3(fX, fY, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f)) * -1;

		// スティックの倒し具合を取得
		m_stick.afTplDiameter[nCntStick] = fabsf(fX);
		if (m_stick.afTplDiameter[nCntStick] < fabsf(fY))
		{
			m_stick.afTplDiameter[nCntStick] = fabsf(fY);
		}
		m_stick.afTplDiameter[nCntStick] /= 32768.0f; // 倒している状態の初期値
	}
}

//===========================================================================================================================================================================================
//2点の角度を求める
//===========================================================================================================================================================================================
float CInputJoypad::FindAngle(D3DXVECTOR3 pos, D3DXVECTOR3 TargetPos)
{
	float fAngle; //角度

	fAngle = atan2f(TargetPos.y - pos.y, TargetPos.x - pos.x);

	fAngle -= (D3DX_PI * 0.5f);
	fAngle *= -1.0f;

	return fAngle;
}

//===========================================================================================================================================================================================
// スティックの入力を方向パッドフラグに変換
//===========================================================================================================================================================================================
WORD CInputJoypad::GetJoypadStick(SHORT sThumbX, SHORT sThumbY, SHORT sDeadZone)
{
	WORD wButtons = 0;

	if (sThumbY >= sDeadZone)
	{
		wButtons |= XINPUT_GAMEPAD_DPAD_UP;
	}
	else if (sThumbY <= -sDeadZone)
	{
		wButtons |= XINPUT_GAMEPAD_DPAD_DOWN;
	}

	if (sThumbX <= -sDeadZone)
	{
		wButtons |= XINPUT_GAMEPAD_DPAD_LEFT;
	}
	else if (sThumbX >= sDeadZone)
	{
		wButtons |= XINPUT_GAMEPAD_DPAD_RIGHT;
	}

	return wButtons;
}

//==========================================================================================
// コントローラーの入力情報の取得
//==========================================================================================
D3DXVECTOR2 CInputJoypad::GetLInputState(void)
{
	return m_LInput;
}

//==========================================================================================
// コントローラーの入力情報の取得
//==========================================================================================
D3DXVECTOR2 CInputJoypad::GetRInputState(void)
{
	return m_RInput;
}

//==========================================================================================
// スティックの入力情報を取得
//==========================================================================================
CInputJoypad::STICKINPUT CInputJoypad::GetStick(void)
{
	return m_stick;
}